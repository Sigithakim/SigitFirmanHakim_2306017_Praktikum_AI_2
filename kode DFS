{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMZq11d81MRWPq2Qk+Ip/6F"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"Q1G7mL5a3MiO"},"outputs":[],"source":["from collections import defaultdict\n","\n","class Graph:\n","    def __init__(self):\n","        self.graph = defaultdict(list)\n","\n","    def addEdge(self, u, v):\n","        self.graph[u].append(v)\n","\n","    def DFSUtil(self, v, visited, path, target):\n","        visited.add(v)\n","        path.append(v)\n","\n","        if v == target:\n","            return True\n","\n","        for neighbour in self.graph[v]:\n","            if neighbour not in visited:\n","                if self.DFSUtil(neighbour, visited, path, target):\n","                    return True\n","\n","        path.pop()\n","        return False\n","\n","    def findPathDFS(self, start, target):\n","        visited = set()\n","        path = []\n","\n","        if self.DFSUtil(start, visited, path, target):\n","            return path\n","        else:\n","            return \"Tidak ada jalur yang ditemukan.\"\n","\n","if __name__ == \"__main__\":\n","    g = Graph()\n","    g.addEdge(0, 1)\n","    g.addEdge(0, 2)\n","    g.addEdge(1, 2)\n","    g.addEdge(2, 0)\n","    g.addEdge(2, 3)\n","    g.addEdge(3, 3)\n","\n","    start_node = 2\n","    target_node = 3\n","\n","    print(f\"Berikut adalah jalur DFS dari node {start_node} ke node {target_node}:\")\n","    print(g.findPathDFS(start_node, target_node))"]}]}