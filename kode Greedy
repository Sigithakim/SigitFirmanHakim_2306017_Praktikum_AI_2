{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNCLcIq7stY5VHzWWrOtI1p"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"C18f4cVz6_Z-","executionInfo":{"status":"ok","timestamp":1741960586183,"user_tz":-420,"elapsed":67,"user":{"displayName":"Sigit Firman Hakim","userId":"14536828570121894268"}},"outputId":"d32b01e0-9ab5-4b80-fa47-dda598121f35"},"outputs":[{"output_type":"stream","name":"stdout","text":["Simpul tujuan ditemukan!\n","Urutan kunjungan simpul: S → E → D → G\n"]},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":1}],"source":["from queue import PriorityQueue\n","\n","def greedy_search(graph, start, goal):\n","    frontier = PriorityQueue()\n","    frontier.put((heuristic[start], start))  # Menyimpan (heuristik, simpul)\n","    explored = set()\n","    path = []  # Menyimpan urutan simpul yang dikunjungi\n","\n","    while not frontier.empty():\n","        _, current_node = frontier.get()  # Ambil simpul dengan prioritas terendah\n","\n","        if current_node in explored:\n","            continue  # Lewati jika simpul sudah dikunjungi sebelumnya\n","\n","        path.append(current_node)\n","        explored.add(current_node)\n","\n","        if current_node == goal:\n","            print(\"Simpul tujuan ditemukan!\")\n","            print(\"Urutan kunjungan simpul:\", \" → \".join(path))\n","            return True\n","\n","        for neighbor in graph[current_node]:\n","            if neighbor not in explored:\n","                priority = heuristic[neighbor]\n","                frontier.put((priority, neighbor))\n","\n","    print(\"Simpul tujuan tidak ditemukan!\")\n","    return False\n","\n","# Heuristik (nilai estimasi ke goal)\n","heuristic = {\n","    'A': 9,\n","    'B': 4,\n","    'C': 2,\n","    'D': 5,\n","    'E': 3,\n","    'S': 7,\n","    'G': 0\n","}\n","\n","# Graph sebagai adjacency list\n","graph = {\n","    'S': ['A', 'E'],\n","    'A': ['B', 'C'],\n","    'B': ['D'],\n","    'C': ['G'],\n","    'D': ['G'],\n","    'E': ['D']\n","}\n","\n","start_node = 'S'\n","goal_node = 'G'\n","\n","greedy_search(graph, start_node, goal_node)"]}]}